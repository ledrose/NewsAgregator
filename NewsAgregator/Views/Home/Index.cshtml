@model NewsAgregator.ViewModels.NewsInputModel;
@{
    ViewData["Title"] = "Home Page";
    var sourcesSer = Html.Raw(Json.Serialize(Model.Sources));
    Console.WriteLine(sourcesSer);
}
@section Scripts {
    <script>
    const pageLoadCount = 10;
    let startIndex = 0;
    let finalPage = false;
    let startTime = "";
    let endTime = "";
    let searchQuery = "";
    let sources =  JSON.parse('@sourcesSer');
    function formatItem(item) { 
            let replaceMap = new Map([
                ["*{url}", item["url"]],
                ["*{title}", item["title"]],
                ["*{description}", item["description"]],
                ["*{category}", item["category"]],
                ["*{creationDate}", item["creationDate"]],
                ["*{sourceName}", item["sourceName"]]
            ]);
            let template = $("#tmpl").html();
            for (let [key, value] of replaceMap.entries()) {
                template = template.replace(key, value);
            }
            return template
    }
    function addAllToList(data) {
        var list = "";
        
        if (data.length!=0) {
            for (let i = 0; i < data.length; i++) {
                list += formatItem(data[i]);
            }   
            $("#list").children().last().after(list);
        }
        else if (startIndex == 0) {
            $("#list").children().last().after("<p>Новости по вашему запросу не были найдены</p>")
        }
    }
    async function fetchNews(func) {
        $("#list").children().last().after($("#loader").html());
        var sourcesString = ""
        for (let i=0;i<sources.length;i++) {
            sourcesString+=`"${sources[i]["name"]}",`
        }
        var postBody = {
            "amount": pageLoadCount,
            "startIndex": startIndex,
            "sources": sources,
            "startTime": startTime,
            "endTime": endTime,
            "searchQuery": searchQuery,
            "timeOffsetInHours" : -(new Date().getTimezoneOffset())/60
        }
        console.log(JSON.stringify(postBody));
        let response = await fetch(
            "/api/News", {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json;charset=utf-8'
              },
              body: JSON.stringify(postBody)
            })
        
        let result = await response.json();
        console.log(result);
        startIndex+=result["items"].length;
        finalPage = result["final"]
        $("#list").children(".loader").remove();

        addAllToList(result["items"]);
        func();
    };
     function isInViewport(tag) {
        var elementTop = $(tag).offset().top;
        var elementBottom = elementTop + $(tag).outerHeight();
        var viewportTop = $(window).scrollTop();
        var viewportBottom = viewportTop + $(window).height();
        return elementBottom > viewportTop && elementTop < viewportBottom;
     };
    function handleScroll(e) {
        if (finalPage) {return;}
         if (isInViewport("#viewportEnd")) {
             fetchNews(()=>{
                $(window).one('resize scroll', handleScroll);
             })
         }
         else {
             $(window).one('resize scroll', handleScroll);
         }
     };
     function initData() {
         sources = [];
         $("[class*='sourceCheckbox']").each((i, el) => {
             if (el.checked) {
                let a = [];
                $(`[class*='catCheck${el.value}']`).each((j,el2) => {
                    console.log(el.value);
                    if (el2.checked) {
                        a.push(el2.value)
                    }
                })
                a.push("");
                sources.push({
                    "name": el.value,
                    "categories" : a
                });
             }
         });
         startTime = $("#startTime").val();
         endTime = $("#endTime").val();
         searchQuery = $("#searchQuery").val();
     }
     function resetList() {
         initData();
         if (!finalPage) {
             $(window).off('resize scroll', handleScroll);
         }
         final = false;
         startIndex = 0;
         $("#list").children(".list_item").remove();
         fetchNews(() => {
             $(window).one('resize scroll', handleScroll)
         });
     }
     onload = (event) => {
        initData();
        console.log(sources);
        $("#changeEventBase").on('change', '.sourceCheckbox', function() {
            console.log($(this));
            if (this.checked) {
                    $(this).siblings(".categoryGroup").find(".categoryCheckbox").prop("disabled", false);
            }
            else {
                    $(this).siblings(".categoryGroup").find(".categoryCheckbox").prop("disabled", "disabled");
            }
        });
        fetchNews(()=>{
            $(window).one('resize scroll', handleScroll);
        });
     };
     
</script>
}
<div class="row justify-content-evenly">
    <div class="col-3">
        <div class=" p-2 bg-info rounded-3 mt-5">
            <form onsubmit="event.preventDefault(); resetList()" id="changeEventBase">
                    @foreach (var source in Model.Sources)
                    {
                    <div class="form-check">
                            <input class="form-check-input sourceCheckbox" checked type="checkbox" value="@source.Name" on id="Check@{@source.Name}">
                            <label class="form-check-label" for="Check@{@source.Name}">
                                @source.Name
                            </label>
                            <div class="categoryGroup">
                            @foreach (var category in source.Categories)
                            {
                                if (category != "")
                                {
                                    <div class="form-check">
                                        <input class="form-check-input categoryCheckbox catCheck@{@source.Name}" checked type="checkbox" value="@category" on id="Check@{@category}">
                                        <label class="form-check-label" for="Check@{@category}">
                                            @category
                                        </label>
                                    </div>
                                }
                            }
                            </div>
                        </div>
                    }
                    <label class="form-check-label" for="startTime">Начальное время</label>
                    <input id="startTime" class="input form-control" asp-for="StartTime" asp-format="{0:yyyy-MM-ddTHH:mm}" />
                    <label class="form-check-label" for="endTime">Конечное время</label>
                    <input id="endTime" class="input form-control"  asp-for="EndTime" asp-format="{0:yyyy-MM-ddTHH:mm}" />
                    <label class="form-check-label" for="searchQuery">Запрос поиска</label>
                    <input id="searchQuery" class="input form-control" asp-for="SearchQuery" asp-format="{0:yyyy-MM-ddTHH:mm}" />
                    <div style="height:20px;"></div>
                    <button type="submit" class="btn btn-primary mb-2">Принять фильтры</button>
            </form>
        </div>
    </div>
    <div class="col-9">
        <div>
            <div class="row justify-content-center gx-5" id="list">
                <div class="nullEl"></div>
            </div>
            <div id="viewportEnd" style="height:100px;"></div>
        </div>
    </div>
</div>

<template id="tmpl">
        <div class="col-md-8 mb-4 bg-info border border-info p-3 rounded-3 list_item">
            <span class="badge bg-danger px-2 py-1 shadow-1-strong mb-3">*{sourceName}</span>
            <span class="badge bg-warning px-2 py-1 shadow-1-strong mb-3">*{category}</span>
            <span class="badge bg-info px-2 py-1 shadow-1-strong mb-3">*{creationDate}</span>
            <h4><strong>*{title}</strong></h4>
            <p class="text">
                    *{description}
            </p>
            <a href="*{url}" class="btn btn-primary">Далее</a>
        </div>
</template>
<template id="loader">
        <div class="col-2 loader">
            <img src="~/loading.gif" />
        </div>
</template>